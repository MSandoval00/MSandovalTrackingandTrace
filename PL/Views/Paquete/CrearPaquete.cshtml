@model BL.Paquete
@{
    ViewBag.Title = "CrearPaquete";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    #map {
        height: 400px;
    }
</style>

<script>
    (g => { var h, a, k, p = "The Google Maps JavaScript API", c = "google", l = "importLibrary", q = "__ib__", m = document, b = window; b = b[c] || (b[c] = {}); var d = b.maps || (b.maps = {}), r = new Set, e = new URLSearchParams, u = () => h || (h = new Promise(async (f, n) => { await (a = m.createElement("script")); e.set("libraries", [...r] + ""); for (k in g) e.set(k.replace(/[A-Z]/g, t => "_" + t[0].toLowerCase()), g[k]); e.set("callback", c + ".maps." + q); a.src = `https://maps.${c}apis.com/maps/api/js?` + e; d[q] = f; a.onerror = () => h = n(Error(p + " could not load.")); a.nonce = m.querySelector("script[nonce]")?.nonce || ""; m.head.append(a) })); d[l] ? console.warn(p + " only loads once. Ignoring:", g) : d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n)) })({
        key: "AIzaSyCSKBDdPPlfca_zTwyxKiicRQn1qfgRjLw",
    });
</script>

<h2>Registrar paquete</h2>
<hr />
<div class="container">
    <form action="@Url.Action("CrearPaquete","Paquete")" method="post">
        <div class="row">
            @Html.HiddenFor(model => Model.IdPaquete)
            <div class="col-md-4">
                @Html.LabelFor(Model => Model.Detalle)
                @Html.TextBoxFor(Model => Model.Detalle, new { @class = "form-control" })
            </div>
            <div class="col-md-4">
                @Html.LabelFor(Model => Model.Peso)
                @Html.TextBoxFor(Model => Model.Peso, new { @class = "form-control" })
            </div>
            <br />
            <div class="col-md-4">
                <input type="submit" class="btn btn-success" name="name" value="Registrar paquete" />
                @Html.ActionLink("Cancelar", "Cards", "Paquete", new { @class = "btn btn-danger" })
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-lg-12">
                @Html.LabelFor(Model => Model.DireccionOrigen)
                @Html.TextBoxFor(Model => Model.DireccionOrigen, new { @class = "form-control", @id = "txtdireccionorigen", @readonly = "readonly" })
            </div>
        </div>
               
        
        <div class="row">
            <div class="col-xs-12">
                @Html.LabelFor(Model => Model.DireccionEntrega)
                @Html.TextBoxFor(Model => Model.DireccionEntrega, new { @class = "form-control", @id = "txtdireccionentrega", @readonly = "readonly" })
            </div>
        </div>

        <hr />
            <div id="map"></div>
    </form>
</div>
    <script type="text/javascript">
          // Initialize and add the map
        let map;
        let marker;
        let markerOrigen;
        let markerEntrega;
        let infoWindow;
        let input;
        
        async function initMap() {
        // The location of Uluru
        const position = {lat:19.4303622, lng:-99.1616508  };
        // Request needed libraries.
        const {Map} = await google.maps.importLibrary("maps");
        const {AdvancedMarkerView} = await google.maps.importLibrary("marker");

        // The map, centered at Uluru
        map = new Map(document.getElementById("map"), {
            zoom: 15,
            center: position,
            mapId: "DEMO_MAP_ID",
        });

        infoWindow=new google.maps.InfoWindow({
            content: "Presiona la localización",
            position: position,
        });

        infoWindow.open(map)
        //Obtener dirección

        google.maps.event.addListener(map ,'click', function(event){

            if (markerOrigen==undefined) {
                input = $("#txtdireccionorigen");
                markerOrigen = new google.maps.Marker({
                    map: map,
                    position: event.latLng,
                });
                marker = markerOrigen;
            } else if (markerEntrega == undefined) {
                input = $("#txtdireccionentrega");
                markerEntrega = new google.maps.Marker({
                    map: map,
                    position: event.latLng,
                });
                marker = markerEntrega;
            } else {
                return 
            }
        //marker = new google.maps.Marker({
        //    map: map,
        //    position: event.latLng,
        //});
            //if (marker == null) {
            //    marker.setMap(null);
            //} else

        var geocoder=new google.maps.Geocoder();
        geocoder.geocode({
                'latLng':event.latLng
        }, function (results, status){
                    if(status==google.maps.GeocoderStatus.OK){
                        if(results[0]){
                            input.val(results[0].formatted_address);
                            
                            //$("#txtdireccionorigen").val(results[0].formatted_address);
                            infoWindow.close(map);
                        }
                    }
            });
    });
        }
        initMap();
</script>


